#+TITLE:     Demo Inferece Work
#+AUTHOR: J. Roman Arguello
#+EMAIL:     jacob.arguello@unilch
#+DATE:      <2016-05-30>
#+STARTUP: showall
#+DESCRIPTION: Compuational analysis of DamID TaDa data
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+XSLT:
#+BABEL: :session *R* :cache yes :exports both :tangle yes
#+OPTIONS: ^:nil


* Convert VCF to dadi format.

- To start off with, we will only work with the 'neutral' class of
  SNPs.
- I am using Stefan's script to convert VCF to dadi format.
- To get the ancestral state calls for each of these SNPs, I am using
  the previously generated calls from our G3 paper.


** Run python script modified from Stephan (vcf2dadi_GDL_Neutral_Class.py)
- this will generate a 'dadi' formatted file, but w/out the ancestral
  state calls. I extracted the ancetral states from the G3 paper.

#+begin_src

__author__ = 'stefan & roman'

#Include third-party libraries
import vcf
import random

#opening IO to the vcf file
vcfIO = open("autosomal_IBD_Callability_masked_ZW184removed_biallelic_neutral_sites.vcf", 'r')  # Declare IO with vcf input
#vcfIO = open("test.vcf", 'r')  # Declare IO with vcf input


vcf_data = vcf.Reader(vcfIO)               # Declaring the vcf object (requires pyVCF module);

#opening IO to output file
output_file_name = "autosomal_IBD_Callability_masked_ZW184removed_biallelic_neutral_sites_random_allele_dadi_input.txt"
outIO = open(output_file_name,"w")


#print calledBase.gt_type

outIO.write("\t".join(["Dmel","AncState","Allele1","Bpop","Ipop","Npop","Tpop","Zpop","Allele2","Bpop","Ipop","Npop","Tpop","Zpop","Gene","Position\n"]))

for variant in vcf_data:
    #print variant
    #Declare and re-initialize allele frequencies & missing data
    B_freq_alt = 0
    B_freq_ref = 0
    B_miss = 0

    I_freq_alt = 0
    I_freq_ref = 0
    I_miss = 0

    N_freq_alt = 0
    N_freq_ref = 0
    N_miss = 0

    T_freq_alt = 0
    T_freq_ref = 0
    T_miss = 0

    Z_freq_alt = 0
    Z_freq_ref = 0
    Z_miss = 0
    


    for idx1,sampleCall in enumerate(variant.samples):

        # Bpop
        if idx1 >= 0 and idx1 < 15: 
            if sampleCall.gt_type == None: #Count missing data
                B_miss = B_miss + 1

            if sampleCall.gt_type != None:
                #print(sampleCall.gt_type)
                
                if (sampleCall.gt_type==2):
                    B_freq_alt = B_freq_alt + 1 #Count number of alternate alleles in the Bpop sample
                if(sampleCall.gt_type==1): # if the call is heterozygous then random choose one allele
                    myG = [0,2] # the two possible genotype calls (homo ref = 0; homo alt = 2)
                    myS = random.choice(myG) # choose 0 or 2 at radom

                    if (myS == 2):
                        #print("alt")
                        B_freq_alt = B_freq_alt + 1 #Count number of alternate alleles in the Bpop sample


        # Ipop
        if idx1 >= 16 and idx1 < 34:
            if sampleCall.gt_type == None:  #Count missing data
                I_miss = I_miss + 1

            if sampleCall.gt_type != None:

                if (sampleCall.gt_type==2):
                    I_freq_alt = I_freq_alt + 1 #Count number of alternate alleles in the Ipop sample
                    
                if(sampleCall.gt_type==1): # if the call is heterozygous then random choose one allele
                    myG = [0,2] # the two possible genotype calls (homo ref = 0; homo alt = 2)
                    myS = random.choice(myG) # choose 0 or 2 at radom

                    if (myS == 2):
                        I_freq_alt = I_freq_alt + 1 #Count number of alternate alleles in the Ipop sample

        # Npop
        if idx1 >= 34 and idx1 < 53:
            if sampleCall.gt_type == None:  #Count missing data
                N_miss = N_miss + 1

            if sampleCall.gt_type != None:

                if (sampleCall.gt_type==2):
                    N_freq_alt = N_freq_alt + 1 #Count number of alternate alleles in the Npop sample
                    
                if(sampleCall.gt_type==1): # if the call is heterozygous then random choose one allele
                    myG = [0,2] # the two possible genotype calls (homo ref = 0; homo alt = 2)
                    myS = random.choice(myG) # choose 0 or 2 at radom

                    if (myS == 2):
                        N_freq_alt = N_freq_alt + 1 #Count number of alternate alleles in the Npop sample 
            
        # Tpop
        if idx1 >= 53 and idx1 < 71:
            if sampleCall.gt_type == None:  #Count missing data
                T_miss = T_miss + 1

            if sampleCall.gt_type != None:

                if (sampleCall.gt_type==2):
                    T_freq_alt = T_freq_alt + 1 #Count number of alternate alleles in the Tpop sample
                    
                if(sampleCall.gt_type==1): # if the call is heterozygous then random choose one allele
                    myG = [0,2] # the two possible genotype calls (homo ref = 0; homo alt = 2)
                    myS = random.choice(myG) # choose 0 or 2 at radom

                    if (myS == 2):
                        T_freq_alt = T_freq_alt + 1 #Count number of alternate alleles in the Tpop sample 
            
        # Zpop
        if idx1 >= 71 and idx1 < 84:
            if sampleCall.gt_type == None:  #Count missing data
                Z_miss = Z_miss + 1

            if sampleCall.gt_type != None:

                if (sampleCall.gt_type==2):
                    Z_freq_alt = Z_freq_alt + 1 #Count number of alternate alleles in the Zpop sample
                    
                if(sampleCall.gt_type==1): # if the call is heterozygous then random choose one allele
                    myG = [0,2] # the two possible genotype calls (homo ref = 0; homo alt = 2)
                    myS = random.choice(myG) # choose 0 or 2 at radom

                    if (myS == 2):
                        Z_freq_alt = Z_freq_alt + 1 #Count number of alternate alleles in the Zpop sample   
        

            
            
    #Calclate frequencies of the reference alleles (NOTE: this assumes a constant sample size (i.e. no missing data))
    B_freq_ref = 15 - B_freq_alt - B_miss
    I_freq_ref = 19 - I_freq_alt - I_miss
    N_freq_ref = 19 - N_freq_alt - N_miss
    T_freq_ref = 18 - T_freq_alt - T_miss
    Z_freq_ref = 13 - Z_freq_alt - Z_miss

    #B_freq_ref = 15 - B_freq_alt - B_miss
    #I_freq_ref = 19 - I_freq_alt - I_miss
    #N_freq_ref = 19 - N_freq_alt - N_miss
    #T_freq_ref = 18 - T_freq_alt - T_miss
    #Z_freq_ref = 13 - Z_freq_alt - Z_miss

    
    #print("-{0}-\t---\t{0}\t{2}\t{3}\t{4}\t{5}\t{6}\t{1}\t{7}\t{8}\t{9}\t{10}\t{11}\t{12}\t{13}\n".format(variant.alleles[0], variant.alleles[1],B_freq_ref,I_freq_ref,N_freq_ref,T_freq_ref,Z_freq_ref,B_freq_alt,I_freq_alt,N_freq_alt,T_freq_alt,Z_freq_alt, variant.CHROM,variant.POS))

    outIO.write("-{0}-\t---\t{0}\t{2}\t{3}\t{4}\t{5}\t{6}\t{1}\t{7}\t{8}\t{9}\t{10}\t{11}\t{12}\t{13}\n".format(variant.alleles[0], variant.alleles[1],B_freq_ref,I_freq_ref,N_freq_ref,T_freq_ref,Z_freq_ref,B_freq_alt,I_freq_alt,N_freq_alt,T_freq_alt,Z_freq_alt, variant.CHROM,variant.POS))


#+END_SRC


-  Run the perl script to insert the ancestral state for each of these
   SNP positions (input_ancestral_states.pl)

- this will read in the 'dadi' formatted file from above, and then
  fill in the ancestral state calls (column 2), by pulling them from
  additional files.

#+begin_src

  #!/usr/bin/perl -w

  open (IN, $ARGV[0]) || die("cant open dadi input file\n"); # open the dadi file w/out the ancestral state file

  while (<IN>) {
      if ($_ =~ m/Dmel/) {chomp; print "$_\n"; } # ignore the header and just print it to the new file
      if (!($_ =~ m/Dmel/)) {
          chomp;
          @dat = split("\t",$_);

          # get out the chr and position, which will be used to pull out the ancestral state (w/ awk, below)
          $chr = $dat[-2];
          $pos = $dat[-1];


          # split up the chroms. here to run more quickly
          if ($chr eq "2L") {
              $AAfile = "/Volumes/Global_Diversity_Data/multi_species_aln/Ancestral_States_for_Fully_Masked_VCFs/chr2L_IBD_masked_biallelic_ZW184removed_AncDer_States.txt";
          }
          if ($chr eq "2R") {
              $AAfile = "/Volumes/Global_Diversity_Data/multi_species_aln/Ancestral_States_for_Fully_Masked_VCFs/chr2R_IBD_masked_biallelic_ZW184removed_AncDer_States.txt";
          }
          if ($chr eq "3L") {
              $AAfile = "/Volumes/Global_Diversity_Data/multi_species_aln/Ancestral_States_for_Fully_Masked_VCFs/chr3L_IBD_masked_biallelic_ZW184removed_AncDer_States.txt";
          }
          if ($chr eq "3R") {
              $AAfile = "/Volumes/Global_Diversity_Data/multi_species_aln/Ancestral_States_for_Fully_Masked_VCFs/chr3R_IBD_masked_biallelic_ZW184removed_AncDer_States.txt";
          }
          if ($chr eq "4") {
              $AAfile = "/Volumes/Global_Diversity_Data/multi_species_aln/Ancestral_States_for_Fully_Masked_VCFs/chr4_IBD_masked_biallelic_ZW184removed_AncDer_States.txt";
          }


          # use awk to pull out the ancestral state
          $com = "awk '{if (\$1==$pos) {print \$4; exit}}' $AAfile";
          #print $com, "\n";
          $AS = `$com`;
          chomp $AS;

          # error out if there is not data for this variable site <- shouln't happen!
          if (length($AS) < 1) {
              die("no anc. state: $chr\t$pos\n");
          }

          # fiddle w/ format
          $AS = "-$AS-";
          #print "--- ", $AS, "\n";

          $dat[1] =  $AS;
          print join("\t", @dat), "\n";

      }

  }




#+end_src


- I am manually removing the lines with the chr4 SNPs.








* Examing the number of SNPs available when 'projecting' down to different sample sizes.


<2017-03-09 Thu> UPDATE: I am using the dadi input file for only those
SNPs that have > 95 post. prob. calls for ancestral states
(autosomal_IBD_Callability_masked_ZW184removed_biallelic_neutral_sites_random_allele_polarized_dadi_input_postprob_anc_above95.txt)

- the python scripts for this are:
 - Bpop_Srange.py
 - Ipop_Srange.py
 - Npop_Srange.py
 - Tpop_Srange.py
 - Zpop_Srange.py

- Using dadi to calculate the number of snps for the projections:


#+begin_src
import dadi
import matplotlib.pyplot as pyplot #only if you want ti use the plotting function


# sample sizes, orders:
#(1) 15: Beijing (B)
#(2) 19: Ithaca (I)
#(3) 19: Netherlands (N)
#4) 18: Tasmania (T)
#(5) 13: Zimbabwe (Z)

for x in range(1, 14):

    #Load data into object of class data_dict
    snp_data     =  dadi.Misc.make_data_dict("autosomal_IBD_Callability_masked_ZW184removed_biallelic_neutral_sites_random_allele_polarized_dadi_input_postprob_anc_above95.txt")
    fs= dadi.Spectrum.from_data_dict(snp_data, pop_ids=['Bpop','Ipop','Npop','Tpop','Zpop'], projections=[1,1,1,1,x],polarized=True)

    # marginalize
    fs_B = fs.marginalize([1,2,3,4])
    fs_I = fs.marginalize([0,2,3,4])
    fs_N = fs.marginalize([0,1,3,4])
    fs_T = fs.marginalize([0,1,2,4])
    fs_Z = fs.marginalize([0,1,2,3])


    S_Z = fs_Z.S()
    print("Zpop {0}\t{1}".format(x,S_Z))


#+end_src

- running them in the background:

#+begin_src

python Bpop_Srange.py > Bpop_Proj_Range.txt &
python Ipop_Srange.py > Ipop_Proj_Range.txt &
python Npop_Srange.py > Npop_Proj_Range.txt &
python Tpop_Srange.py > Tpop_Proj_Range.txt &
python Zpop_Srange.py > Zpop_Proj_Range.txt &

#+end_src


- NOTE: after updating the dadi input file with only the >95%
  post. prob. calls, the sample size to maximaze the projections
  remains the same as with the previous file containig all SNPs
  (ProjectionValues.xlsx)




















* Get the total number of 'nutral' sites in the genome that were callable

** Get the total number of 4D sites that are callable

- To get the 4D positions, I have the VCF files w/ 'fake SNPs' anotated
and can search for the 'A,V,T,G':


- I am going to get rid of the chr4 SNPS, so am not counting them
  here.

- (Got rid of chr4 SNPs from dadi outputted info file)

#+begin_src

awk '{if ($16 == "A/A" || $16 == "P/P" || $16 == "V/V" || $16 =="T/T" || $16 == "G/G" ) {print $1"\t"$2"\t"$2} }' /Volumes/Global_Diversity_Data/SNPcalls/IBD_Masked/SNPeff_annotations_full_genome/2L_v5_34_Full_Annotaion.out > /Volumes/Global_Diversity_Data/SNPcalls/IBD_Masked/SNPeff_annotations_full_genome/2L_v5_34_Full_Annotaion_4D.txt  &  
awk '{if ($16 == "A/A" || $16 == "P/P" || $16 == "V/V" || $16 =="T/T" || $16 == "G/G" ) {print $1"\t"$2"\t"$2} }' /Volumes/Global_Diversity_Data/SNPcalls/IBD_Masked/SNPeff_annotations_full_genome/2R_v5_34_Full_Annotaion.out > /Volumes/Global_Diversity_Data/SNPcalls/IBD_Masked/SNPeff_annotations_full_genome/2R_v5_34_Full_Annotaion_4D.txt &
awk '{if ($16 == "A/A" || $16 == "P/P" || $16 == "V/V" || $16 =="T/T" || $16 == "G/G" ) {print $1"\t"$2"\t"$2} }' /Volumes/Global_Diversity_Data/SNPcalls/IBD_Masked/SNPeff_annotations_full_genome/3L_v5_34_Full_Annotaion.out > /Volumes/Global_Diversity_Data/SNPcalls/IBD_Masked/SNPeff_annotations_full_genome/3L_v5_34_Full_Annotaion_4D.txt &
awk '{if ($16 == "A/A" || $16 == "P/P" || $16 == "V/V" || $16 =="T/T" || $16 == "G/G" ) {print $1"\t"$2"\t"$2} }' /Volumes/Global_Diversity_Data/SNPcalls/IBD_Masked/SNPeff_annotations_full_genome/3R_v5_34_Full_Annotaion.out > /Volumes/Global_Diversity_Data/SNPcalls/IBD_Masked/SNPeff_annotations_full_genome/3R_v5_34_Full_Annotaion_4D.txt  &


less 2L_v5_34_Full_Annotaion_4D.txt | uniq > 2L_v5_34_Full_Annotaion_4D_uniq.bed &
less 2R_v5_34_Full_Annotaion_4D.txt | uniq > 2R_v5_34_Full_Annotaion_4D_uniq.bed &
less 3L_v5_34_Full_Annotaion_4D.txt | uniq > 3L_v5_34_Full_Annotaion_4D_uniq.bed &
less 3R_v5_34_Full_Annotaion_4D.txt | uniq > 3R_v5_34_Full_Annotaion_4D_uniq.bed &

intersectBed -a 2L_v5_34_Full_Annotaion_4D_uniq.bed -b /Volumes/Global_Diversity_Data/obesity_masks/callability_masks/whole_genome_masked_intervals.bed -v > 2L_v5_34_Full_Annotaion_4D_uniq_callable.bed &
intersectBed -a 2R_v5_34_Full_Annotaion_4D_uniq.bed -b /Volumes/Global_Diversity_Data/obesity_masks/callability_masks/whole_genome_masked_intervals.bed -v > 2R_v5_34_Full_Annotaion_4D_uniq_callable.bed &
intersectBed -a 3L_v5_34_Full_Annotaion_4D_uniq.bed -b /Volumes/Global_Diversity_Data/obesity_masks/callability_masks/whole_genome_masked_intervals.bed -v > 3L_v5_34_Full_Annotaion_4D_uniq_callable.bed &
intersectBed -a 3R_v5_34_Full_Annotaion_4D_uniq.bed -b /Volumes/Global_Diversity_Data/obesity_masks/callability_masks/whole_genome_masked_intervals.bed -v > 3R_v5_34_Full_Annotaion_4D_uniq_callable.bed &

#+end_src


| chrom file                          | Positions |
|-------------------------------------+-----------|
| 2L_v5_34_Full_Annotaion_4D_uniq.bed |    430544 |
| 2R_v5_34_Full_Annotaion_4D_uniq.bed |    448892 |
| 3L_v5_34_Full_Annotaion_4D_uniq.bed |    451254 |
| 3R_v5_34_Full_Annotaion_4D_uniq.bed |    558871 |
|-------------------------------------|-----------|
| Total                               |   1889561 |



** Get the total number of small introic positions that are callable


#+begin_src
T<-read.table("Dmel_introns_dedicated_no_overlappers2.txt")
yo<-which(T[,1]== "chr2RHet" | T[,1]==  "chr2LHet" | T[,1]==  "chr3LHet" | T[,1]==  "chr3RHet" | T[,1]==  "chrU" |  T[,1]==  "chrXHet" |  T[,1]==  "chrYHet" |  T[,1]==  "chr4" | T[,1]==  "chrX")
T.auto<-T[-yo,]
unique(as.vector(T.auto[,1]))
write.table(T.auto,"Dmel_introns_dedicated_no_overlappers2_chr2L2R3L3R_only.bed", sep="\t",quote=FALSE,row.names=FALSE,col.names=FALSE)
sum(T.auto[,4])
#+end_src

- The total number BEFORE callablity mask: 895361

- Get only the callable introns:
#+begin_src
intersectBed -a Dmel_introns_dedicated_no_overlappers2_chr2L2R3L3R_only.bed -b /Volumes/Global_Diversity_Data/obesity_masks/callability_masks/whole_genome_masked_intervals.bed
-v > Dmel_introns_dedicated_no_overlappers2_chr2L2R3L3R_only_Callable.bed
#+end_src

#+begin_src R
T<-read.table("Dmel_introns_dedicated_no_overlappers2_chr2L2R3L3R_only_Callable.bed")
sum(T[,4])
#+end_src

- The total number AFTER callablity mask: 883995


- Total 'Neutral SNPs' (small intronic + 4d positions) for chr2L, 2R, 3L, 3R = 167502
- Total positions =  883995 + 1889561 = 2773556
- fraction variant = 167502/2773556 = 0.06039251


- To get the number of segregating sites w/in Zpop after projecting down, I ran the
  "Zpop_Srange.py" script:    S = 99162.1538462


- So the # of monomorphic = 2773556 - 99162 = 2674394

- NOTE: on the first pass I mistakenly put the number of small
  intronic SNPs available (883995) as the total monomorphic
  class. this is now fixed! [2017-02-25 Sat]



* using Dadi to work w/ SFS

- outputting sum stats and SFS using the scripts: Pop_SumStats.py,
  Joint_SFS_Neth_Zimb_dadi.py

* Launching FastSimCoal jobs

- modify the 'Generic names' section of the
  "launch_fs_oneData_cluster.sh" shell script

- launch the jobs by entering

#+begin_src
bash launch_fs_oneData_cluster.sh dro04
#+end_src


- extracting out the best likelihood
#+begin_src
bash FindBestRun.sh dro01 2
bash FindBestRun.sh dro02 9
bash FindBestRun.sh dro03 5
bash FindBestRun.sh dro04 16
bash FindBestRun.sh dro05 18
bash FindBestRun.sh dro06 19
#+end_src


# ######################################################


* Generate JSFS in dadi for "obs" file w/in FastSimCoal

- I am using the following scripts to generate the JSFS:
  - estimate_corrected_SFS_Zpop.py
  - Joint_SFS_Neth_Zimb_dadi.py
  - Joint_SFS_Neth_Ithaca_Zimb_dadi.py
  -  <2017-01-05 Thu 12:32> Joint_SFS_Neth_Zimb_Beijing_dadi.py

- <2017-01-19 Thu 10:47> In talking w/ Sefan yesterday I realized I
  was making an error by adding the monomorphic sitest to the
  outputted dadi file instead of replacing the first number with the
  total number of monomorphic sites. I have corrected that now. I am
  check that the marganized SFS for the 2 pop file is correct

#+begin_src R
T<-read.table("N_Z_DSFS.obs",skip=2)
# 2 pops
# pop 1 sample size = 14
# pop 2 sample size = 12

Tmat<-matrix(T,ncol=15)


# plot the margainalized SFS for pop 0 = zimbabwe
barplot(t(as.matrix(Tmat[2:13,1])))

# plot the margainalized SFS for pop 1 = netherlands
barplot(t(as.matrix(Tmat[1,2:15])))
#+end_src

- <2017-01-19 Thu 10:47> Replacing the .obs files for the 2pop models
  (models 4,5,6) and rerunning them.



# ######################################################


* Number of segregating sites for the various population combinations:

- In an effort to not bias diversity after removing the sites where
  post. prob. on ancestral calls was < 95, we are removing the
  proportional number of sites from the data set (the total number of
  'neutral positions').  

- To do this we are simply keeping the ratio constant:
  - Total #  of 'neutral SNPS * (# of SNPs after 95% cut off / # of
    SNPs from total data set)
  - 2773556 * (85361/99164) = 2387495 = Total # of sites 


| SFS data set  | Script                              |     Seg. Sites | Total Sites | Monomorphic |
|---------------+-------------------------------------+----------------+-------------+-------------|
| SFS_Z.txt     | SFS_Zimb_dadi.py                    |  99162.1538462 |     2773556 |     2674394 |
| SFS_N_Z.txt   | Joint_SFS_Neth_Zimb_dadi.py         |  114957.856248 |     2773556 |     2658598 |
| SFS_B_N_Z.txt | Joint_SFS_Neth_Zimb_Beijing_dadi.py |   123227.03785 |     2773556 |     2650329 |
| SFS_N_I_Z.txt | Joint_SFS_Neth_Ithaca_Zimb_dadi.py  | 125909.2312545 |     2773556 |     2647647 |
|               |                                     |                |             |             |
|---------------+-------------------------------------+----------------+-------------+-------------|





# ######################################################
* inspecting the high freq. derived SNPs

- I am outputting the positions that are high freq. derived in the
  Zpopulation from the dadi input file (get_HigFreqDerPos.R).

#+begin_src
 
# read in the dadi table
T<-read.table("autosomal_IBD_Callability_masked_ZW184removed_biallelic_neutral_sites_random_allele_polarized_dadi_input.txt", header=TRUE)

# get the anc. state
Tanc<-as.vector(T[,2])
Tanc<-gsub("-", "", Tanc) # get rid of dashes
Tanc.indic<-as.numeric(Tanc[] == T[,3]) # which sites have allele 1 as the ancestral (yes = 1)
Tanc.indic[which(Tanc.indic==1)] <- 14 # if ancestral state is allele 1, then get derived alelle for Zpop column (14) 
Tanc.indic[which(Tanc.indic==0)] <- 8 # if ancestral state is allele 2, then get derived alelle for Zpop column (8)

# make matrix to fill
OUT<-matrix(data=NA,nrow=0,ncol=4)
colnames(OUT)<-c("chr","start","end","freq")


for (i in 1:length(Tanc.indic)) { # loop over the positions
  if (T[i,Tanc.indic[i]] >= 8) { # get those positions that are segregating at high numbers
    #print(paste(T[i,15], T[i,16], T[i,16], (T[i,Tanc.indic[i]]/13),  sep = "\t"))
    OUT<-rbind(OUT,c(as.character(T[i,15]), T[i,16], T[i,16], (T[i,Tanc.indic[i]]/13))) # put them in the matrix in bed format
  }
}

# write to file
write.table(OUT, "autosomal_IBD_Callability_masked_ZW184removed_biallelic_neutral_sites_random_allele_polarized_dadi_input_HiFreqDerived.bed", quote=FALSE, sep="\t", row.names=FALSE)


 
#+end_src

- This results in a bed file, that I can then intersect w/ the
  alignment file containing the posterior prob. of ancestarl states.


#+begin_src

intersectBed -a ~/Dropbox/fly_demo/autosomal_IBD_Callability_masked_ZW184removed_biallelic_neutral_sites_random_allele_polarized_dadi_input_HiFreqDerived.bed -b autosomes_IBD_masked_biallelic_ZW184removed_AncDer_States.bed -wao > ~/Dropbox/fly_demo/autosomal_IBD_Callability_masked_ZW184removed_biallelic_neutral_sites_random_allele_polarized_dadi_input_HiFreqDerived_PostProb.bed

#+end_src


- get only those perfectly overlapping post. prob. calls (clean_postprob_table.R)

#+begin_src

# read in the post. prob. table
T<-read.table("autosomal_IBD_Callability_masked_ZW184removed_biallelic_neutral_sites_random_allele_polarized_dadi_input_HiFreqDerived_PostProb.bed", header=FALSE)

# get only those sites that overlapp exactly (not +/- 1bp)
T<-T[which(T[,2]==T[,6] & T[,3]==T[,7]),]

# write to file
write.table(T, "autosomal_IBD_Callability_masked_ZW184removed_biallelic_neutral_sites_random_allele_polarized_dadi_input_HiFreqDerived_PostProb_Cleaned.bed", quote=FALSE, sep="\t", row.names=FALSE)

# plot
plot(hist(T[,10]),xlab="Post. Prob.",main="Post. Prob. for\nHigh Freq. Derived SNPs\nZimbabwe",col="darkgrey")


#+end_src


#+CAPTION: Posterior Prob. on High Freq. Derived SNPs
#+NAME:   fig:SED-HR4049
 [[/Users/uncleneptune/Dropbox/fly_demo/PostProb_HiFreqDerived.png]]






# ######################################################
* Correcting the SFS


- I am splitting up the dadi file in order to make appendi the
  posterior call on the ancestral state quicker:


#+begin_src
split autosomal_IBD_Callability_masked_ZW184removed_biallelic_neutral_sites_random_allele_polarized_dadi_input2L.txt chr2L_
split autosomal_IBD_Callability_masked_ZW184removed_biallelic_neutral_sites_random_allele_polarized_dadi_input2R.txt chr2R_
split autosomal_IBD_Callability_masked_ZW184removed_biallelic_neutral_sites_random_allele_polarized_dadi_input3L.txt chr3L_
split autosomal_IBD_Callability_masked_ZW184removed_biallelic_neutral_sites_random_allele_polarized_dadi_input3R.txt chr3R_
#+end_src

- Run the "dadi_with_postprob_anc.pl" script on all the files in the respective
  directory using "batch_append.pl":

#+begin_src
clear; perl batch_append.pl &
#+end_src


- this calls on the script that will append the post. prob. column
  ("dadi_with_postprob_anc.pl")


#+begin_src
#!/usr/bin/perl -w -I/Users/uncleneptune/perl5/lib/perl5/darwin-thread-multi-2level/

# which chromosome? (2L, 2R, 3L, 3R)
$w_chrom = $ARGV[0];

# provide file and path info
open (IN1, "<", $ARGV[1]) || die("cant open dadi file\n"); # open dadi file

# make new ouptput file
$outfile = $ARGV[1];
$outfile = $outfile .'_'. $w_chrom;

open (OUT, ">", $outfile) || die("cant open metagene output file\n");


while (<IN1>) { # loop over dadi file to get out the chrom and position
    chomp $_;
    @dat = split("\t", $_);
    $chr = $dat[-2];
    $pos = $dat[-1];
    print $chr, "\t", $pos, "\n";
    
    if ($dat[0] eq "Dmel") {  # print the header to the new file
        print OUT join("\t", @dat[0..15]),"\tProbDerAlelles\n";
    }
    
    if ($dat[0] ne "Dmel") { # skip the header

        $com = "awk \'{if (\$1==$pos) {print \$0; exit}}\'  /Volumes/Passport/multi_species_aln/Ancestral_States_for_Fully_Masked_VCFs/chr" .''. $w_chrom .''. "_IBD_masked_biallelic_ZW184removed_AncDer_States.txt";
        $postprob_info = `$com`;
        @pi = split("\t", $postprob_info);
        $PostProb = $pi[-1];
        chomp $PostProb;

        if ($PostProb eq "NA") {
            $PostProb = 1; # leave the ancestral call as is
        }

        # output to new file
        print OUT join("\t", @dat[0..15]), "\t", $PostProb ,"\n";
        
    }
}


close (IN1);
#+end_src



-merge all of these files 

#+begin_src
cat chr2R*_2R > autosomal_IBD_Callability_masked_ZW184removed_biallelic_neutral_sites_random_allele_polarized_dadi_postprob_input2R.txt
cat chr2L*_2L > autosomal_IBD_Callability_masked_ZW184removed_biallelic_neutral_sites_random_allele_polarized_dadi_postprob_input2L.txt
cat chr3R*_3R > autosomal_IBD_Callability_masked_ZW184removed_biallelic_neutral_sites_random_allele_polarized_dadi_postprob_input3R.txt
cat chr3L*_3L > autosomal_IBD_Callability_masked_ZW184removed_biallelic_neutral_sites_random_allele_polarized_dadi_postprob_input3L.txt

cat  */*postprob*.txt > autosomal_IBD_Callability_masked_ZW184removed_biallelic_neutral_sites_random_allele_polarized_dadi_input_postprob_anc.txt
#+end_src

- manually added header to this new 'dadi-like' file
- note that this will automatically exclude chr4 SNPs

- I wrote a perl script that will 'correct' the SFS from the dadi-like
  file w/ anc. state probs. ("correct_SFS.pl")
- I also wrote a batch script ("batch_correct_SFS.pl") that will do
  this over replicates and the generate SFS for each iteration using
  ("compute_SFS_from_dadi_file.pl"). This is currently only getting
  the SFS for the Zpop.
- I then plot this using ("plot_SFS_from_dadi_file.R"), with the
  non-manipulated SFS as black points.

- I zipped up the intermediate files for generating this appended dadi
  files in: temp_dir_for_appending_postprob_ancestral_states.zip


#+CAPTION: SFS and error 'correcting' ancestral state calls (n=500)
#+NAME:   fig:SED-HR4049
 [[/Users/uncleneptune/Dropbox/fly_demo/Corrected_SFS_n500.png]]



- I am having a look at the relation ship between SNP class and
  post. prob. call ("plot_SNPclass_AncProb.R")


#+begin_src

require(plotrix)
require(ggplot2)


O<-matrix(data=NA,ncol=3,nrow=13)
colnames(O)<-c("Mean","SE")

T<-read.table("SNPclass_AncProb.txt")
colnames(T)<-c("SNP.class","Prob")
#T<-as.data.frame(T)

for (i in 1:13) {
  print(mean(T[which(T$SNP.class==i),2]))
  print(std.error(T[which(T$SNP.class==i),2]))
  O[i,1]<-i
  O[i,2]<-mean(T[which(T$SNP.class==i),2])
  O[i,3]<-std.error(T[which(T$SNP.class==i),2])
}

O<-as.data.frame(O)
colnames(O)<-c("SNP.Class","Post.Prob","SE")

p<-ggplot(O, aes(x = factor(SNP.Class), y = Post.Prob)) +  geom_point(position = position_dodge(),stat="identity",fill="grey")
p<-p + ylim(0, 1)
p<-p+geom_errorbar(aes(ymin=Post.Prob-SE, ymax=Post.Prob+SE),col="red") + theme_bw()
p<-p+ ylab(c("Mean of the posterior prob. on ancestral stat call")) + xlab(c("SNP Class"))
p


#+end_src


#+CAPTION: Posterior probability of ancestral state calls decrease with frequency 
#+NAME:   fig:SED-HR4049
 [[/Users/uncleneptune/Dropbox/fly_demo/SNPclass_AncProb.png]]

- There is a relationship between the frequency of the SNP and the
  posterior probability of the anestral state call. So what does the
  SFS look like when you get rid of positions with 'low' prob. calls.
  I am plotting the SFS for Zpop with only call >= 95% 


- making a dadi table w/ this subset of sites
#+begin_src R
T<-read.table("autosomal_IBD_Callability_masked_ZW184removed_biallelic_neutral_sites_random_allele_polarized_dadi_input_postprob_anc.txt",header=TRUE)

T.hc<-T[which(T[,17]>=0.95),]

write.table(T.hc[1:16], "autosomal_IBD_Callability_masked_ZW184removed_biallelic_neutral_sites_random_allele_polarized_dadi_input_postprob_anc_above95.txt", sep="\t",row.names=FALSE,quote=FALSE)
#+end_src
  

- plotting it wit "plot_SFS_from_dadi_file.R"
#+CAPTION: SFS (w/out monomorphic class) for the unaltered dadi file and the dadi file with only high-confidence high-freq. derived SNPs (>95)
#+NAME:   fig:SED-HR4049
 [[/Users/uncleneptune/Dropbox/fly_demo/Corrected_SFS_pp95.png]]



- Sample size in the original dadi file = 167,502
- Sample size in the gt95 dadi file = 144,698
- kept 0.8638583 of the data; lost 0.1361417 of the data

- after projecting: 87,191


# ######################################################


# ######################################################

* predictive simulations

- we need to have set values to simulate under. in the *.par files
  (bottom) they are specified: "//per Block: data type, num loci,
  rec. rate and mut rate + optional parameters"
  - for the data type = DNA
  - for the num loci = 2773556
  - for the rec. rate = average value of cameron's data from the
    Drosophila melanogaster Recombination Rate Calculator (RRC)
    Version 2.3 = 2.2e-08

#+begin_src 
 mean(c(2.39,2.66,1.79,1.96)) * 10^(-8) 
#+end_src
  
  - for the mut rate = 1.3e-9 from Stefan's paper

- command to find the run w/ the best likelihood:


#+begin_src 
grep -Ril "271966.649"  run*/dro02/*.bestlhoods # for the unaltered SFS before remove low conf. post. prob. anc. calls = run8

grep -Ril "233095.155"  run*/dro02/*.bestlhoods # for the reduced dataset w/ post. prob. anc. calls > 95% = run13

grep -Ril "353456.954"  run*/dro06/*.bestlhoods # for the reduced dataset w/ post. prob. anc. calls > 95% = run12
#+end_src


- simulate under the best model
#+begin_src
bsub < launch_fastsimcoal2.sh
#+end_src


- plotting the data


#+begin_src
cat pred_sims_1pop_model02_reduced_dataset/dro02_maxL/dro02_maxL_DSFS_dadi.obsSFS pred_sims_1pop_model02_reduced_dataset_2/dro02_maxL/dro02_maxL_DSFS_dadi.obsSFS > pred_sims_1pop_model02_reduced_1K/dro02_maxL_DSFS_dadi.obsSFS
#+end_src

- manually added "1 12" to head of the above DSFS file



# ######################################################

* population clustering using DAPC

- first need to generate "snp" formated file for adegenet. I have a
  script to convert VCF file to this 'snp' format.

- since we are using only a subset of the 'netural' SNPs, i need to
  generate a reduced VCF file, so need a tab-sep file of the chrom and
  position of the SNPs to keep in the VCF. i will do this with
  VCFtools.

- get the chrom and pos from the dadi file:

#+begin_src
awk '{print $15 "\t" $16}'  autosomal_IBD_Callability_masked_ZW184removed_biallelic_neutral_sites_random_allele_polarized_dadi_input_postprob_anc_above95.txt
#+end_src

- run vcftools (v0.1.14):

#+begin_src
vcftools --vcf autosomal_IBD_Callability_masked_ZW184removed_biallelic_neutral_sites.vcf --positions autosomal_IBD_Callability_masked_ZW184removed_biallelic_neutral_sites_random_allele_polarized_dadi_input_postprob_anc_above95_positions.txt --recode       
#+end_src

- run my vcf2snp script:

#+begin_src
#!/usr/bin/perl -w
use List::Util qw( maxstr );


%geno_hash = (
key1 => 'B04line',key2 => 'B05line',key3 => 'B10line',key4 => 'B11line',key5 => 'B12line',key6 => 'B14line',key7 => 'B23line',key8 => 'B28line',key9 => 'B38line',key10 => 'B42line',key11 => 'B43line',key12 => 'B51line',key13 => 'B52line',key14 => 'B54line',key15 => 'B59line',key16 => 'I01line',key17 => 'I02line',key18 => 'I03line',key19 => 'I04line',key20 => 'I06line',key21 => 'I07line',key22 => 'I13line',key23 => 'I16line',key24 => 'I17line',key25 => 'I22line',key26 => 'I23line',key27 => 'I24line',key28 => 'I26line',key29 => 'I29line',key30 => 'I31line',key31 => 'I33line',key32 => 'I34line',key33 => 'I35line',key34 => 'I38line',key35 => 'N01line',key36 => 'N02line',key37 => 'N03line',key38 => 'N04line',key39 => 'N07line',key40 => 'N10line',key41 => 'N11line',key42 => 'N13line',key43 => 'N14line',key44 => 'N15line',key45 => 'N16line',key46 => 'N17line',key47 => 'N18line',key48 => 'N19line',key49 => 'N22line',key50 => 'N23line',key51 => 'N25line',key52 => 'N29line',key53 => 'N30line',key54 => 'T01line',key55 => 'T04line',key56 => 'T05line',key57 => 'T07line',key58 => 'T09line',key59 => 'T10line',key60 => 'T14Aline',key61 => 'T22Aline',key62 => 'T23line',key63 => 'T24line',key64 => 'T25Aline',key65 => 'T29Aline',key66 => 'T30Aline',key67 => 'T35line',key68 => 'T36Bline',key69 => 'T39line',key70 => 'T43Aline',key71 => 'T45Bline',key72 => 'ZH23line',key73 => 'ZH26line',key74 => 'ZH33line',key75 => 'ZH42line',key76 => 'ZS10line',key77 => 'ZW09line',key78 => 'ZW139line',key79 => 'ZW140line',key80 => 'ZW142line',key81 => 'ZW144line',key82 => 'ZW155line',key83 => 'ZW177line',key84 => 'ZW185line'
);





open (IN, $ARGV[0]) || die("cant open vcf input file\n");
@pos = ();
@alleles = ();
#$invar_sites = 0;
while (<IN>) {
    chomp $_;
	#$i=0;
    if ($_ !~  m/^#/) {
        
        @data = split("\t",$_);
        $vcf_pos = $data[1];
        push @pos, $vcf_pos;
        $vcf_refbase = $data[3];
        $vcf_altbase = $data[4];
        $myalleles = $vcf_refbase .'/'. $vcf_altbase;
        push @alleles, $myalleles;
        @genotypes = @data[9..$#data];
       	 
        # check to see if the site is polymorphic still (after removing individuals)
        $g_ref = 0;
        $g_alt = 0;
        $g_het = 0;
        $g_mis = 0;
        $i=0;

        foreach $gt(@genotypes) {
        
            #print "geno: ", $gt, "\n";
            if ( $gt =~ /^0\/0/) { $g = 0; }
            if ( $gt =~ /^0\/1/) { $g = 1; }
            if ( $gt =~ /^1\/1/) { $g = 2; }
            if ( $gt =~ /^\.\/\./) { $g = "-"; }
            
            #@geno_string = split("",$gt);
            if ($g eq "0") {$g_ref++;}
            if ($g eq "1") {$g_het++;}
            if ($g eq "2") {$g_alt++;}
            if ($g eq "-") {$g_mis++;}

            if (defined($g)) {
                #print $g, "\n";
                
                $i++;
                #print $i, "\n";
                #@geno_string = split("",$g);
                $key_id = "key" .''. $i;
                #print $key_id, "\n";
                $geno = $geno_hash{$key_id};
                $geno = $geno .''. $g;
                #print $geno, "\n";
                $geno_hash{ $key_id } = $geno;
                $geno = ();
                
            }
        }
    }
}

#### write the file according to adegenet criteria ####
print ">>>> begin comments - do not remove this line <<<<\n\n";

print "does this get rid of the warning?\n\n";

print ">>>> end comments - do not remove this line <<<<\n";

print ">> position\n";
print join(" ", @pos), "\n";

print ">> allele\n";
print join(" ", @alleles), "\n";

print ">> population\n";
print "Beijing " x  15;
print "Ithaca " x  19;
print "Netherlands " x  19;
print "Tazmania " x  18;
print "Zimbabwe " x  13;
print "\n";

#Ithaca Netherlands Tazamania Zimbabwe\n";

print "ploidy\n";
print "2\n";

print "chromosome\n";
print "$ARGV[1]\n";


for ($j=1;$j<=84;$j++) {
    $getkey = "key" .''. $j;
    $data = $geno_hash{$getkey};
    @dat = split("line",$data);
    print   "> ", $dat[0], "\n";
    print $dat[1], "\n";
}
#+end_src


#+begin_src
perl VCF_2_adegenet_snp_format.pl autosomal_IBD_Callability_masked_ZW184removed_biallelic_neutral_sites_random_allele_polarized_dadi_input_postprob_anc_above95_positions.vcf
#+end_src





# ######################################################



























# ######################################################

* Trouble shooting

- <2017-01-02 Mon 15:02> Of the 20 replicates that I generated, 9 errored out (ls
  run*/dro05/*bad*). Not sure why,
  but I am going to generate 20 more, which will hopefully result in 9
  successful runs that I can replace these with (not sure this is the
  way to go moving forward though).

- <2017-01-02 Mon 15:46> It seems that the historical events for dro04
  and dro05 only have 6 numbers when they should have 7. The previous
  historical event for dro04 was:
  
  1 historical event

  T_SPL_NETH 1 0 1 0 0

  Now it is:
  
  1 historical event
  
  T_SPL_NETH 0 1 1 1 0 0

  And nearly the same for dro05 (now dro05: T_SPL_NETH 0 1 1 1 0 1)


# ######################################################
